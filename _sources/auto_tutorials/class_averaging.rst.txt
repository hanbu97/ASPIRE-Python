
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials/class_averaging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_class_averaging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_class_averaging.py:


Class Averaging
===============

We demonstrate class averaging using the rotationally invariant representation algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 7-23

.. code-block:: default


    import logging

    import matplotlib.pyplot as plt
    import numpy as np
    from PIL import Image as PILImage

    from aspire.classification import RIRClass2D
    from aspire.image import Image
    from aspire.image.xform import NoiseAdder
    from aspire.operators import ScalarFilter
    from aspire.source import ArrayImageSource  # Helpful hint if you want to BYO array.
    from aspire.utils import gaussian_2d

    logger = logging.getLogger(__name__)








.. GENERATED FROM PYTHON SOURCE LINES 24-26

Build Simulated Data
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 28-30

Circular 2D Gaussian Image
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 30-36

.. code-block:: default


    L = 100
    round_disc = gaussian_2d(L, sigma_x=L / 4, sigma_y=L / 4)
    plt.imshow(round_disc)
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_001.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-39

Oval 2D Gaussian Image
^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 39-44

.. code-block:: default


    oval_disc = gaussian_2d(L, sigma_x=L / 20, sigma_y=L / 5)
    plt.imshow(oval_disc)
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_002.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 45-49

Handed Image
^^^^^^^^^^^^

Create richer test set by including an asymmetric image.

.. GENERATED FROM PYTHON SOURCE LINES 49-59

.. code-block:: default


    # Create a second oval.
    oval_disc2 = gaussian_2d(L, L / 5, L / 6, sigma_x=L / 15, sigma_y=L / 20)

    # Strategically add it to `oval_disc`.
    yoval_discL = oval_disc.copy()
    yoval_discL += oval_disc2
    plt.imshow(yoval_discL)
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_003.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-64

Reflected Image
^^^^^^^^^^^^^^^

Also include the reflection of  the asymmetric image.

.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: default


    yoval_discR = np.flipud(yoval_discL)
    plt.imshow(yoval_discR)
    plt.show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_004.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 70-74

Example Data Set Source
^^^^^^^^^^^^^^^^^^^^^^^

We concatenate and shuffle 512 rotations of the Gaussian images above to create our data set.

.. GENERATED FROM PYTHON SOURCE LINES 74-101

.. code-block:: default


    # How many entries (angles) in our stack
    N = 512
    thetas = np.linspace(start=0, stop=360, num=N, endpoint=False)

    classRound = np.zeros((N, L, L))
    classOval = np.zeros((N, L, L))
    classYOvalL = np.zeros((N, L, L))
    classYOvalR = np.zeros((N, L, L))

    for i, theta in enumerate(thetas):
        classRound[i] = np.asarray(PILImage.fromarray(round_disc).rotate(theta))
        classOval[i] = np.asarray(PILImage.fromarray(oval_disc).rotate(theta))
        classYOvalL[i] = np.asarray(PILImage.fromarray(yoval_discL).rotate(theta))
        classYOvalR[i] = np.asarray(PILImage.fromarray(yoval_discR).rotate(theta))

    # We'll make an example data set by concatentating then shuffling these.
    example_array = np.concatenate((classRound, classOval, classYOvalL, classYOvalR))
    np.random.seed(1234567)
    np.random.shuffle(example_array)

    # So now that we have cooked up an example dataset, lets create an ASPIRE source
    src = ArrayImageSource(example_array)

    # Let's peek at the images to make sure they're shuffled up nicely
    src.images(0, 10).show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_005.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 102-107

Class Average
-------------

We use the ASPIRE ``RIRClass2D`` class to classify the images via the rotationally invariant representation (RIR)
algorithm. We then yield class averages by performing ``classify``.

.. GENERATED FROM PYTHON SOURCE LINES 107-121

.. code-block:: default


    rir = RIRClass2D(
        src,
        fspca_components=400,
        bispectrum_components=300,  # Compressed Features after last PCA stage.
        n_nbor=10,
        n_classes=10,
        large_pca_implementation="legacy",
        nn_implementation="legacy",
        bispectrum_implementation="legacy",
    )

    classes, reflections, rotations, shifts, corr = rir.classify()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:02<00:23,  2.61s/it]     20%|##        | 2/10 [00:05<00:20,  2.61s/it]     30%|###       | 3/10 [00:07<00:18,  2.61s/it]     40%|####      | 4/10 [00:10<00:15,  2.61s/it]     50%|#####     | 5/10 [00:13<00:13,  2.61s/it]     60%|######    | 6/10 [00:15<00:10,  2.61s/it]     70%|#######   | 7/10 [00:18<00:07,  2.61s/it]     80%|########  | 8/10 [00:20<00:05,  2.61s/it]     90%|######### | 9/10 [00:23<00:02,  2.60s/it]    100%|##########| 10/10 [00:26<00:00,  2.60s/it]    100%|##########| 10/10 [00:26<00:00,  2.61s/it]




.. GENERATED FROM PYTHON SOURCE LINES 122-124

Display Classes
^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 124-128

.. code-block:: default


    avgs = rir.output(classes, reflections, rotations)
    avgs.images(0, 10).show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_006.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     20%|##        | 2/10 [00:00<00:00, 15.67it/s]     40%|####      | 4/10 [00:00<00:00, 15.27it/s]     60%|######    | 6/10 [00:00<00:00, 15.43it/s]     80%|########  | 8/10 [00:00<00:00, 15.67it/s]    100%|##########| 10/10 [00:00<00:00, 15.64it/s]    100%|##########| 10/10 [00:00<00:00, 15.57it/s]




.. GENERATED FROM PYTHON SOURCE LINES 129-131

Class Averaging with Noise
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 133-135

Add Noise to Data Set
^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 135-156

.. code-block:: default


    # Using the sample variance, we'll compute a target noise variance
    # Noise
    var = np.var(src.images(0, src.n).asnumpy())
    noise_var = var * 2 ** 4

    # We create a uniform noise to apply to the 2D images
    noise_filter = ScalarFilter(dim=2, value=noise_var)

    # Then create noise with the ``NoiseAdder`` class.
    noise = NoiseAdder(seed=123, noise_filter=noise_filter)

    # Add noise to the images by performing ``forward``
    noisy_im = noise.forward(src.images(0, src.n))

    # Recast as an ASPIRE source
    noisy_src = ArrayImageSource(noisy_im)

    # Let's peek at the noisey images
    noisy_src.images(0, 10).show()




.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_007.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 157-159

RIR with Noise
^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 159-174

.. code-block:: default


    # This also demonstrates changing the Nearest Neighbor search to using scikit-learn.
    noisy_rir = RIRClass2D(
        noisy_src,
        fspca_components=400,
        bispectrum_components=300,
        n_nbor=10,
        n_classes=10,
        large_pca_implementation="legacy",
        nn_implementation="sklearn",
        bispectrum_implementation="legacy",
    )

    classes, reflections, rotations, shifts, corr = noisy_rir.classify()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:02<00:23,  2.61s/it]     20%|##        | 2/10 [00:05<00:20,  2.61s/it]     30%|###       | 3/10 [00:07<00:18,  2.61s/it]     40%|####      | 4/10 [00:10<00:15,  2.62s/it]     50%|#####     | 5/10 [00:13<00:13,  2.62s/it]     60%|######    | 6/10 [00:15<00:10,  2.62s/it]     70%|#######   | 7/10 [00:18<00:07,  2.62s/it]     80%|########  | 8/10 [00:20<00:05,  2.62s/it]     90%|######### | 9/10 [00:23<00:02,  2.62s/it]    100%|##########| 10/10 [00:26<00:00,  2.62s/it]    100%|##########| 10/10 [00:26<00:00,  2.62s/it]




.. GENERATED FROM PYTHON SOURCE LINES 175-177

Display Classes
^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 177-182

.. code-block:: default


    avgs = noisy_rir.output(classes, reflections, rotations)
    avgs.images(0, 10).show()





.. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_008.png
   :alt: class averaging
   :srcset: /auto_tutorials/images/sphx_glr_class_averaging_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:01,  7.07it/s]     20%|##        | 2/10 [00:00<00:01,  5.77it/s]     30%|###       | 3/10 [00:00<00:01,  6.26it/s]     40%|####      | 4/10 [00:00<00:00,  6.63it/s]     50%|#####     | 5/10 [00:00<00:00,  6.34it/s]     60%|######    | 6/10 [00:00<00:00,  6.61it/s]     70%|#######   | 7/10 [00:01<00:00,  6.82it/s]     80%|########  | 8/10 [00:01<00:00,  6.59it/s]     90%|######### | 9/10 [00:01<00:00,  6.63it/s]    100%|##########| 10/10 [00:01<00:00,  6.49it/s]    100%|##########| 10/10 [00:01<00:00,  6.51it/s]




.. GENERATED FROM PYTHON SOURCE LINES 183-187

Review a class
--------------

Select a class to review.

.. GENERATED FROM PYTHON SOURCE LINES 187-213

.. code-block:: default


    review_class = 5

    # Display the original image.
    noisy_src.images(review_class, 1).show()

    # Report the identified neighbor indices
    logger.info(f"Class {review_class}'s neighors: {classes[review_class]}")

    # Report the identified neighbors
    Image(noisy_src.images(0, np.inf)[classes[review_class]]).show()

    # Report their associated rots_refls
    rots_refls = ["index, Rotation, Reflection"]
    for i in range(classes.shape[1]):
        rots_refls.append(
            f"{i}, {rotations[review_class, i] * 180 / np.pi}, {reflections[review_class, i]}"
        )
    rots_refls = "\n".join(rots_refls)

    logger.info(
        f"Class {review_class}'s  estimated Rotations and Reflections:\n{rots_refls}"
    )

    # Display the averaged result
    avgs.images(review_class, 1).show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_009.png
         :alt: class averaging
         :srcset: /auto_tutorials/images/sphx_glr_class_averaging_009.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_010.png
         :alt: class averaging
         :srcset: /auto_tutorials/images/sphx_glr_class_averaging_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_tutorials/images/sphx_glr_class_averaging_011.png
         :alt: class averaging
         :srcset: /auto_tutorials/images/sphx_glr_class_averaging_011.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  1.414 seconds)


.. _sphx_glr_download_auto_tutorials_class_averaging.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: class_averaging.py <class_averaging.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: class_averaging.ipynb <class_averaging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
