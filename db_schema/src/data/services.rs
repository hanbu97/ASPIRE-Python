//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "services")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub team_id: i64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub is_deleted: bool,
    pub version: i32,
    pub start_time: DateTime,
    pub expire_time: DateTime,
    pub product_id: i64,
    pub package_id: i64,
    pub status: String,
    pub is_renew: bool,
    pub which_price: String,
    pub r#type: String,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
use quickcheck::{Arbitrary, Gen};
impl Arbitrary for Model {
    fn arbitrary(g: &mut Gen) -> Model {
        let test_range = (1..100000).into_iter().collect::<Vec<u32>>();
        let status = vec!["pending", "success", "failed"];
        let ts = vec![
            "service1", "product2", "service3", "product4", "service5", "product6", "service7",
            "product8",
        ];
        let which_prices: Vec<&str> = vec!["month_price", "price"];

        Model {
            team_id: g.choose(&test_range).unwrap().to_owned() as i64,
            is_renew: bool::arbitrary(g),
            which_price: g.choose(&which_prices).unwrap().to_string(),
            r#type: g.choose(&ts).unwrap().to_string(),
            is_deleted: bool::arbitrary(g),
            version: g.choose(&test_range).unwrap().to_owned() as i32,
            id: g.choose(&test_range).unwrap().to_owned() as i64,
            start_time: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            expire_time: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            product_id: g.choose(&test_range).unwrap().to_owned() as i64,
            package_id: g.choose(&test_range).unwrap().to_owned() as i64,
            status: g.choose(&status).unwrap().to_string(),
            created_at: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            updated_at: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
        }
    }
}
