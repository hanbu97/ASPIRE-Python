//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use std::vec;

use super::sea_orm_active_enums::OrderStatus;
use super::sea_orm_active_enums::OrderType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub service_id: i64,
    pub order_id: Option<i64>,
    pub team_id: i64,
    pub product_id: i64,
    pub user_id: i64,
    pub status: String,
    pub r#type: String,
    pub which_price: String,
    pub paid_at: Option<DateTime>,
    pub duration: i64,
    pub price: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub is_deleted: bool,
    pub version: i32,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

use quickcheck::{Arbitrary, Gen};
impl Arbitrary for Model {
    fn arbitrary(g: &mut Gen) -> Model {
        let test_range = (1..100000).into_iter().collect::<Vec<u32>>();
        let statuss = vec!["pending", "success", "failed"];
        let names = vec![
            "service_name1",
            "product_name2",
            "service_name3",
            "product_name4",
            "service_name5",
            "product_name7",
            "service_name6",
            "product_name8",
        ];
        // let types_enum: Vec<OrderType> = vec![OrderType::Purchase, OrderType::Renewal];
        let types_enum: Vec<&str> = vec!["OrderType::Purchase", "OrderType::Renewal"];
        let status_enum: Vec<OrderStatus> = vec![
            OrderStatus::Paid,
            OrderStatus::NotPaid,
            OrderStatus::UserCancel,
            OrderStatus::PaidTimeoutCancel,
        ];
        let which_prices: Vec<&str> = vec!["month_price", "price"];
        let durations: Vec<i64> = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

        Model {
            which_price: g.choose(&which_prices).unwrap().to_string(),
            team_id: g.choose(&test_range).unwrap().to_owned() as i64,
            product_id: g.choose(&test_range).unwrap().to_owned() as i64,
            user_id: g.choose(&test_range).unwrap().to_owned() as i64,
            service_id: g.choose(&test_range).unwrap().to_owned() as i64,
            status: g.choose(&statuss).unwrap().to_string(),
            r#type: g.choose(&types_enum).unwrap().to_string(),
            paid_at: None,
            duration: g.choose(&durations).unwrap().to_owned() as i64,
            price: g.choose(&test_range).unwrap().to_owned() as i32,
            order_id: Some(g.choose(&test_range).unwrap().to_owned() as i64),
            created_at: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            updated_at: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            is_deleted: bool::arbitrary(g),
            version: g.choose(&test_range).unwrap().to_owned() as i32,
        }
    }
}
