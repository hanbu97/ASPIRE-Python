//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "setmeal_price")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub is_deleted: bool,
    pub version: i32,
    pub hourly_price: i32,
    pub monthly_price: i32,
    pub annual_price: i32,
    pub discount: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}

use quickcheck::{Arbitrary, Gen};
impl Arbitrary for Model {
    fn arbitrary(g: &mut Gen) -> Model {
        let test_range = (1..100000).into_iter().collect::<Vec<u32>>();
        let status = vec!["pending", "success", "failed"];
        let names = vec![
            "service_name1",
            "product_name2",
            "service_name3",
            "product_name4",
            "service_name5",
            "product_name7",
            "service_name6",
            "product_name8",
        ];

        Model {
            id: g.choose(&test_range).unwrap().to_owned() as i64,
            created_at: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            updated_at: chrono::NaiveDateTime::from_timestamp(
                g.choose(&test_range).unwrap().to_owned() as i64,
                0,
            ),
            is_deleted: g.choose(&test_range).unwrap().to_owned() % 2 == 0,
            version: g.choose(&test_range).unwrap().to_owned() as i32,
            hourly_price: g.choose(&test_range).unwrap().to_owned() as i32,
            monthly_price: g.choose(&test_range).unwrap().to_owned() as i32,
            annual_price: g.choose(&test_range).unwrap().to_owned() as i32,
            discount: if g.choose(&test_range).unwrap().to_owned() % 2 == 0 {
                Some(g.choose(&test_range).unwrap().to_owned() as i32)
            } else {
                None
            },
        }
    }
}
